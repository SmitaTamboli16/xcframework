#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
#ifndef AEPTARGET_SWIFT_H
#define AEPTARGET_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AEPCore;
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="AEPTarget",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


@class NSString;
@protocol AEPExtensionRuntime;
@class AEPEvent;

SWIFT_CLASS_NAMED("Target")
@interface AEPMobileTarget : NSObject <AEPExtension>
@property (nonatomic, copy) NSString * _Nonnull name;
@property (nonatomic, copy) NSString * _Nonnull friendlyName;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull extensionVersion;)
+ (NSString * _Nonnull)extensionVersion SWIFT_WARN_UNUSED_RESULT;
+ (void)setExtensionVersion:(NSString * _Nonnull)value;
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nullable metadata;
@property (nonatomic, strong) id <AEPExtensionRuntime> _Nonnull runtime;
- (nullable instancetype)initWithRuntime:(id <AEPExtensionRuntime> _Nonnull)runtime OBJC_DESIGNATED_INITIALIZER;
- (void)onRegistered;
- (void)onUnregistered;
- (BOOL)readyForEvent:(AEPEvent * _Nonnull)event SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AEPTargetPrefetchObject;
@class AEPTargetParameters;
@class AEPTargetRequestObject;
@class NSURL;

@interface AEPMobileTarget (SWIFT_EXTENSION(AEPTarget))
/// Prefetch multiple Target mboxes simultaneously.
/// Executes a prefetch request to your configured Target server with the TargetPrefetchObject list provided
/// in the prefetchObjectArray parameter. This prefetch request will use the provided parameters for all of
/// the prefetches made in this request. The callback will be executed when the prefetch has been completed, returning
/// an error object, nil if the prefetch was successful or error description if the prefetch was unsuccessful.
/// The prefetched mboxes are cached in memory for the current application session and returned when requested.
/// \param prefetchArray an array of AEPTargetPrefetch objects representing the desired mboxes to prefetch
///
/// \param targetParameters a TargetParameters object containing parameters for all the mboxes in the request array
///
/// \param completion the callback <code>closure</code> which will be called after the prefetch is complete.  The parameter in the callback will be nil if the prefetch completed successfully, or will contain error message otherwise
///
+ (void)prefetchContent:(NSArray<AEPTargetPrefetchObject *> * _Nonnull)prefetchArray withParameters:(AEPTargetParameters * _Nullable)targetParameters callback:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Retrieves content for multiple Target mbox locations at once.
/// Executes a batch request to your configured Target server for multiple mbox locations. Any prefetched content
/// which matches a given mbox location is returned and not included in the batch request to the Target server.
/// Each object in the array contains a callback function, which will be invoked when content is available for
/// its given mbox location.
/// \param requestArray An array of AEPTargetRequestObject objects to retrieve content
///
/// \param targetParameters a TargetParameters object containing parameters for all locations in the requests array
///
+ (void)retrieveLocationContent:(NSArray<AEPTargetRequestObject *> * _Nonnull)requestArray withParameters:(AEPTargetParameters * _Nullable)targetParameters;
/// Sets the custom visitor ID for Target.
/// Sets a custom ID to identify visitors (profiles). This ID is preserved between app upgrades,
/// is saved and restored during the standard application backup process, and is removed at uninstall or
/// when AEPTarget.resetExperience is called.
/// \param id a string pointer containing the value of the third party id (custom visitor id)
///
+ (void)setThirdPartyId:(NSString * _Nullable)id;
/// Gets the custom visitor ID for Target
/// This ID will be reset  when the <code>resetExperience()</code> API is called.
/// \param completion the callback <code>closure</code> will be invoked to return the thirdPartyId value or <code>nil</code> if no third-party ID is set
///
+ (void)getThirdPartyId:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completion;
/// Sets the Target session identifier.
/// The provided session ID is persisted in the SDK for a period defined by <code>target.sessionTimeout</code> configuration setting.
/// If the provided session ID is nil or empty or if the privacy status is opted out, the SDK will remove the session ID value from the persistence.
/// This ID is preserved between app upgrades, is saved and restored during the standard application backup process,
/// and is removed at uninstall, upon privacy status update to opted out or when the AEPTarget.resetExperience API is called.
/// \param id a string containing the value of the Target session ID to be set in the SDK.
///
+ (void)setSessionId:(NSString * _Nullable)id;
/// Gets the Target session identifier.
/// The session ID is generated locally in the SDK upon initial Target request and persisted for a period defined by <code>target.sessionTimeout</code> configuration setting.
/// If the session timeout happens upon a subsequent Target request, a new session ID will be generated for use in the request and persisted in the SDK.
/// \param completion the callback <code>closure</code> invoked with the current session ID, or <code>nil</code> if there was an error retrieving it.
///
+ (void)getSessionId:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completion;
/// Sets the Target user identifier.
/// The provided tnt ID is persisted in the SDK and attached to subsequent Target requests. It is used to
/// derive the edge host value in the SDK, which is also persisted and used in future Target requests.
/// If the provided tnt ID is nil or empty or if the privacy status is opted out, the SDK will remove the tnt ID and edge host values from the persistence.
/// This ID is preserved between app upgrades, is saved and restored during the standard application backup process,
/// and is removed at uninstall, upon privacy status update to opted out or when the AEPTarget.resetExperience API is called.
/// \param id a string containing the value of the tnt ID to be set in the SDK.
///
+ (void)setTntId:(NSString * _Nullable)id;
/// Gets the Target user identifier.
/// The tnt ID is returned in the network response from Target after a successful call to <code>prefetchContent</code> API or <code>retrieveLocationContent</code> API, which is then persisted in the SDK.
/// The persisted tnt ID is used in subsequent Target requests until a different tnt ID is returned from Target, or a new tnt ID is set using <code>setTntId</code> API.
/// \param completion the callback <code>closure</code> invoked with the current tnt ID, or <code>nil</code> if there was an error retrieving it.
///
+ (void)getTntId:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completion;
/// Sets the Target preview restart deep link.
/// Set the Target preview URL to be displayed when the preview mode is restarted.
+ (void)resetExperience;
/// Clears prefetched mboxes.
/// Clears the cached prefetched AEPTargetPrefetchObject array.
+ (void)clearPrefetchCache;
/// Sets the Target preview restart deep link.
/// Set the Target preview URL to be displayed when the preview mode is restarted.
/// \param deeplink the URL which will be set for preview restart
///
+ (void)setPreviewRestartDeepLink:(NSURL * _Nonnull)deeplink;
/// Sends a display notification to Target for given prefetched mboxes. This helps Target record location display events.
/// \param names (required) an array of displayed location names
///
/// \param targetParameters for the displayed location
///
+ (void)displayedLocations:(NSArray<NSString *> * _Nonnull)names withTargetParameters:(AEPTargetParameters * _Nullable)targetParameters;
/// Sends a click notification to Target if a click metric is defined for the provided location name.
/// Click notification can be sent for a location provided a load request has been executed for that prefetched or regular mbox
/// location before, indicating that the mbox was viewed. This request helps Target record the clicked event for the given location or mbox.
/// \param name String value representing the name for location/mbox
///
/// \param targetParameters a TargetParameters object containing parameters for the location clicked
///
+ (void)clickedLocation:(NSString * _Nonnull)name withTargetParameters:(AEPTargetParameters * _Nullable)targetParameters;
@end


/// Class for specifying Target order parameters
SWIFT_CLASS_NAMED("TargetOrder")
@interface AEPTargetOrder : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull orderId;
@property (nonatomic, readonly) double total;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable purchasedProductIds;
/// Initialize a <code>TargetOrder</code> with an order <code>id</code>, order <code>total</code>  and a list of <code>purchasedProductIds</code>
/// \param id <code>String</code> order id
///
/// \param total <code>Double</code> order total amount
///
/// \param purchasedProductIds a list of purchased product ids
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id total:(double)total purchasedProductIds:(NSArray<NSString *> * _Nullable)purchasedProductIds OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class AEPTargetProduct;

/// Target parameter class, used for specifying custom parameters to be sent in Target requests,
/// such as location (former mbox) parameters, profile parameters, order/product parameters.
SWIFT_CLASS_NAMED("TargetParameters")
@interface AEPTargetParameters : NSObject
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable parameters;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable profileParameters;
@property (nonatomic, readonly, strong) AEPTargetOrder * _Nullable order;
@property (nonatomic, readonly, strong) AEPTargetProduct * _Nullable product;
/// Initialize a <code>TargetParameters</code> with the mbox parameters, the profile parameters, the order parameters and the product parameters.
/// \param parameters the mbox parameters
///
/// \param profileParameters the profile parameters
///
/// \param order the order parameters
///
/// \param product the product parameters
///
- (nonnull instancetype)initWithParameters:(NSDictionary<NSString *, NSString *> * _Nullable)parameters profileParameters:(NSDictionary<NSString *, NSString *> * _Nullable)profileParameters order:(AEPTargetOrder * _Nullable)order product:(AEPTargetProduct * _Nullable)product OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// <code>TargetPrefetch</code> class, used for specifying a mbox location.
SWIFT_CLASS_NAMED("TargetPrefetch")
@interface AEPTargetPrefetchObject : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, strong) AEPTargetParameters * _Nullable targetParameters;
/// Instantiate a <code>TargetPrefetch</code> object
/// \param name <code>String</code> mbox name for this prefetch
///
/// \param targetParameters <code>TargetParameters</code> for this prefetch
///
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name targetParameters:(AEPTargetParameters * _Nullable)targetParameters OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Class for specifying Target product parameters
SWIFT_CLASS_NAMED("TargetProduct")
@interface AEPTargetProduct : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull productId;
@property (nonatomic, readonly, copy) NSString * _Nullable categoryId;
/// Initialize a <code>TargetProduct</code> with a product  id and a productCategoryId.
/// \param productId product id
///
/// \param categoryId product category id
///
- (nonnull instancetype)initWithProductId:(NSString * _Nonnull)productId categoryId:(NSString * _Nullable)categoryId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS_NAMED("TargetRequest")
@interface AEPTargetRequestObject : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, copy) NSString * _Nonnull defaultContent;
@property (nonatomic, readonly, strong) AEPTargetParameters * _Nullable targetParameters;
/// Instantiate a <code>TargetRequest</code> object
/// \param mboxName <code>String</code> mbox name for this request
///
/// \param defaultContent <code>String</code> default content for this request
///
/// \param targetParameters <code>TargetParameters</code> for this request
///
/// \param contentCallback which will get called with target mbox content
///
- (nonnull instancetype)initWithMboxName:(NSString * _Nonnull)mboxName defaultContent:(NSString * _Nonnull)defaultContent targetParameters:(AEPTargetParameters * _Nullable)targetParameters contentCallback:(void (^ _Nullable)(NSString * _Nullable))contentCallback OBJC_DESIGNATED_INITIALIZER;
/// Instantiate a <code>TargetRequest</code> object
/// \param mboxName <code>String</code> mbox name for this request
///
/// \param defaultContent <code>String</code> default content for this request
///
/// \param targetParameters <code>TargetParameters</code> for this request
///
/// \param contentWithDataCallback which will get called with target mbox content, and an optional dictionary containing one or more of response tokens, analytics payload, and click metric analytics payload, if available.
///
- (nonnull instancetype)initWithMboxName:(NSString * _Nonnull)mboxName defaultContent:(NSString * _Nonnull)defaultContent targetParameters:(AEPTargetParameters * _Nullable)targetParameters contentWithDataCallback:(void (^ _Nullable)(NSString * _Nullable, NSDictionary<NSString *, id> * _Nullable))contentWithDataCallback OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
#ifndef AEPTARGET_SWIFT_H
#define AEPTARGET_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AEPCore;
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="AEPTarget",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


@class NSString;
@protocol AEPExtensionRuntime;
@class AEPEvent;

SWIFT_CLASS_NAMED("Target")
@interface AEPMobileTarget : NSObject <AEPExtension>
@property (nonatomic, copy) NSString * _Nonnull name;
@property (nonatomic, copy) NSString * _Nonnull friendlyName;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull extensionVersion;)
+ (NSString * _Nonnull)extensionVersion SWIFT_WARN_UNUSED_RESULT;
+ (void)setExtensionVersion:(NSString * _Nonnull)value;
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nullable metadata;
@property (nonatomic, strong) id <AEPExtensionRuntime> _Nonnull runtime;
- (nullable instancetype)initWithRuntime:(id <AEPExtensionRuntime> _Nonnull)runtime OBJC_DESIGNATED_INITIALIZER;
- (void)onRegistered;
- (void)onUnregistered;
- (BOOL)readyForEvent:(AEPEvent * _Nonnull)event SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AEPTargetPrefetchObject;
@class AEPTargetParameters;
@class AEPTargetRequestObject;
@class NSURL;

@interface AEPMobileTarget (SWIFT_EXTENSION(AEPTarget))
/// Prefetch multiple Target mboxes simultaneously.
/// Executes a prefetch request to your configured Target server with the TargetPrefetchObject list provided
/// in the prefetchObjectArray parameter. This prefetch request will use the provided parameters for all of
/// the prefetches made in this request. The callback will be executed when the prefetch has been completed, returning
/// an error object, nil if the prefetch was successful or error description if the prefetch was unsuccessful.
/// The prefetched mboxes are cached in memory for the current application session and returned when requested.
/// \param prefetchArray an array of AEPTargetPrefetch objects representing the desired mboxes to prefetch
///
/// \param targetParameters a TargetParameters object containing parameters for all the mboxes in the request array
///
/// \param completion the callback <code>closure</code> which will be called after the prefetch is complete.  The parameter in the callback will be nil if the prefetch completed successfully, or will contain error message otherwise
///
+ (void)prefetchContent:(NSArray<AEPTargetPrefetchObject *> * _Nonnull)prefetchArray withParameters:(AEPTargetParameters * _Nullable)targetParameters callback:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Retrieves content for multiple Target mbox locations at once.
/// Executes a batch request to your configured Target server for multiple mbox locations. Any prefetched content
/// which matches a given mbox location is returned and not included in the batch request to the Target server.
/// Each object in the array contains a callback function, which will be invoked when content is available for
/// its given mbox location.
/// \param requestArray An array of AEPTargetRequestObject objects to retrieve content
///
/// \param targetParameters a TargetParameters object containing parameters for all locations in the requests array
///
+ (void)retrieveLocationContent:(NSArray<AEPTargetRequestObject *> * _Nonnull)requestArray withParameters:(AEPTargetParameters * _Nullable)targetParameters;
/// Sets the custom visitor ID for Target.
/// Sets a custom ID to identify visitors (profiles). This ID is preserved between app upgrades,
/// is saved and restored during the standard application backup process, and is removed at uninstall or
/// when AEPTarget.resetExperience is called.
/// \param id a string pointer containing the value of the third party id (custom visitor id)
///
+ (void)setThirdPartyId:(NSString * _Nullable)id;
/// Gets the custom visitor ID for Target
/// This ID will be reset  when the <code>resetExperience()</code> API is called.
/// \param completion the callback <code>closure</code> will be invoked to return the thirdPartyId value or <code>nil</code> if no third-party ID is set
///
+ (void)getThirdPartyId:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completion;
/// Sets the Target session identifier.
/// The provided session ID is persisted in the SDK for a period defined by <code>target.sessionTimeout</code> configuration setting.
/// If the provided session ID is nil or empty or if the privacy status is opted out, the SDK will remove the session ID value from the persistence.
/// This ID is preserved between app upgrades, is saved and restored during the standard application backup process,
/// and is removed at uninstall, upon privacy status update to opted out or when the AEPTarget.resetExperience API is called.
/// \param id a string containing the value of the Target session ID to be set in the SDK.
///
+ (void)setSessionId:(NSString * _Nullable)id;
/// Gets the Target session identifier.
/// The session ID is generated locally in the SDK upon initial Target request and persisted for a period defined by <code>target.sessionTimeout</code> configuration setting.
/// If the session timeout happens upon a subsequent Target request, a new session ID will be generated for use in the request and persisted in the SDK.
/// \param completion the callback <code>closure</code> invoked with the current session ID, or <code>nil</code> if there was an error retrieving it.
///
+ (void)getSessionId:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completion;
/// Sets the Target user identifier.
/// The provided tnt ID is persisted in the SDK and attached to subsequent Target requests. It is used to
/// derive the edge host value in the SDK, which is also persisted and used in future Target requests.
/// If the provided tnt ID is nil or empty or if the privacy status is opted out, the SDK will remove the tnt ID and edge host values from the persistence.
/// This ID is preserved between app upgrades, is saved and restored during the standard application backup process,
/// and is removed at uninstall, upon privacy status update to opted out or when the AEPTarget.resetExperience API is called.
/// \param id a string containing the value of the tnt ID to be set in the SDK.
///
+ (void)setTntId:(NSString * _Nullable)id;
/// Gets the Target user identifier.
/// The tnt ID is returned in the network response from Target after a successful call to <code>prefetchContent</code> API or <code>retrieveLocationContent</code> API, which is then persisted in the SDK.
/// The persisted tnt ID is used in subsequent Target requests until a different tnt ID is returned from Target, or a new tnt ID is set using <code>setTntId</code> API.
/// \param completion the callback <code>closure</code> invoked with the current tnt ID, or <code>nil</code> if there was an error retrieving it.
///
+ (void)getTntId:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completion;
/// Sets the Target preview restart deep link.
/// Set the Target preview URL to be displayed when the preview mode is restarted.
+ (void)resetExperience;
/// Clears prefetched mboxes.
/// Clears the cached prefetched AEPTargetPrefetchObject array.
+ (void)clearPrefetchCache;
/// Sets the Target preview restart deep link.
/// Set the Target preview URL to be displayed when the preview mode is restarted.
/// \param deeplink the URL which will be set for preview restart
///
+ (void)setPreviewRestartDeepLink:(NSURL * _Nonnull)deeplink;
/// Sends a display notification to Target for given prefetched mboxes. This helps Target record location display events.
/// \param names (required) an array of displayed location names
///
/// \param targetParameters for the displayed location
///
+ (void)displayedLocations:(NSArray<NSString *> * _Nonnull)names withTargetParameters:(AEPTargetParameters * _Nullable)targetParameters;
/// Sends a click notification to Target if a click metric is defined for the provided location name.
/// Click notification can be sent for a location provided a load request has been executed for that prefetched or regular mbox
/// location before, indicating that the mbox was viewed. This request helps Target record the clicked event for the given location or mbox.
/// \param name String value representing the name for location/mbox
///
/// \param targetParameters a TargetParameters object containing parameters for the location clicked
///
+ (void)clickedLocation:(NSString * _Nonnull)name withTargetParameters:(AEPTargetParameters * _Nullable)targetParameters;
@end


/// Class for specifying Target order parameters
SWIFT_CLASS_NAMED("TargetOrder")
@interface AEPTargetOrder : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull orderId;
@property (nonatomic, readonly) double total;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable purchasedProductIds;
/// Initialize a <code>TargetOrder</code> with an order <code>id</code>, order <code>total</code>  and a list of <code>purchasedProductIds</code>
/// \param id <code>String</code> order id
///
/// \param total <code>Double</code> order total amount
///
/// \param purchasedProductIds a list of purchased product ids
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id total:(double)total purchasedProductIds:(NSArray<NSString *> * _Nullable)purchasedProductIds OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class AEPTargetProduct;

/// Target parameter class, used for specifying custom parameters to be sent in Target requests,
/// such as location (former mbox) parameters, profile parameters, order/product parameters.
SWIFT_CLASS_NAMED("TargetParameters")
@interface AEPTargetParameters : NSObject
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable parameters;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable profileParameters;
@property (nonatomic, readonly, strong) AEPTargetOrder * _Nullable order;
@property (nonatomic, readonly, strong) AEPTargetProduct * _Nullable product;
/// Initialize a <code>TargetParameters</code> with the mbox parameters, the profile parameters, the order parameters and the product parameters.
/// \param parameters the mbox parameters
///
/// \param profileParameters the profile parameters
///
/// \param order the order parameters
///
/// \param product the product parameters
///
- (nonnull instancetype)initWithParameters:(NSDictionary<NSString *, NSString *> * _Nullable)parameters profileParameters:(NSDictionary<NSString *, NSString *> * _Nullable)profileParameters order:(AEPTargetOrder * _Nullable)order product:(AEPTargetProduct * _Nullable)product OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// <code>TargetPrefetch</code> class, used for specifying a mbox location.
SWIFT_CLASS_NAMED("TargetPrefetch")
@interface AEPTargetPrefetchObject : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, strong) AEPTargetParameters * _Nullable targetParameters;
/// Instantiate a <code>TargetPrefetch</code> object
/// \param name <code>String</code> mbox name for this prefetch
///
/// \param targetParameters <code>TargetParameters</code> for this prefetch
///
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name targetParameters:(AEPTargetParameters * _Nullable)targetParameters OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Class for specifying Target product parameters
SWIFT_CLASS_NAMED("TargetProduct")
@interface AEPTargetProduct : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull productId;
@property (nonatomic, readonly, copy) NSString * _Nullable categoryId;
/// Initialize a <code>TargetProduct</code> with a product  id and a productCategoryId.
/// \param productId product id
///
/// \param categoryId product category id
///
- (nonnull instancetype)initWithProductId:(NSString * _Nonnull)productId categoryId:(NSString * _Nullable)categoryId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS_NAMED("TargetRequest")
@interface AEPTargetRequestObject : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, copy) NSString * _Nonnull defaultContent;
@property (nonatomic, readonly, strong) AEPTargetParameters * _Nullable targetParameters;
/// Instantiate a <code>TargetRequest</code> object
/// \param mboxName <code>String</code> mbox name for this request
///
/// \param defaultContent <code>String</code> default content for this request
///
/// \param targetParameters <code>TargetParameters</code> for this request
///
/// \param contentCallback which will get called with target mbox content
///
- (nonnull instancetype)initWithMboxName:(NSString * _Nonnull)mboxName defaultContent:(NSString * _Nonnull)defaultContent targetParameters:(AEPTargetParameters * _Nullable)targetParameters contentCallback:(void (^ _Nullable)(NSString * _Nullable))contentCallback OBJC_DESIGNATED_INITIALIZER;
/// Instantiate a <code>TargetRequest</code> object
/// \param mboxName <code>String</code> mbox name for this request
///
/// \param defaultContent <code>String</code> default content for this request
///
/// \param targetParameters <code>TargetParameters</code> for this request
///
/// \param contentWithDataCallback which will get called with target mbox content, and an optional dictionary containing one or more of response tokens, analytics payload, and click metric analytics payload, if available.
///
- (nonnull instancetype)initWithMboxName:(NSString * _Nonnull)mboxName defaultContent:(NSString * _Nonnull)defaultContent targetParameters:(AEPTargetParameters * _Nullable)targetParameters contentWithDataCallback:(void (^ _Nullable)(NSString * _Nullable, NSDictionary<NSString *, id> * _Nullable))contentWithDataCallback OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
