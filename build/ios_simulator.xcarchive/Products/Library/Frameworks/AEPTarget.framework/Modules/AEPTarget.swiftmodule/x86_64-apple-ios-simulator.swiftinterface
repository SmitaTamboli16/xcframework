// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target x86_64-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name AEPTarget
import AEPCore
import AEPServices
@_exported import AEPTarget
import Foundation
import Swift
import _Concurrency
@objc(AEPTargetParameters) public class TargetParameters : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let parameters: [Swift.String : Swift.String]?
  @objc final public let profileParameters: [Swift.String : Swift.String]?
  @objc final public let order: AEPTarget.TargetOrder?
  @objc final public let product: AEPTarget.TargetProduct?
  @objc public init(parameters: [Swift.String : Swift.String]? = nil, profileParameters: [Swift.String : Swift.String]? = nil, order: AEPTarget.TargetOrder? = nil, product: AEPTarget.TargetProduct? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc(AEPTargetPrefetchObject) public class TargetPrefetch : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let name: Swift.String
  @objc final public let targetParameters: AEPTarget.TargetParameters?
  @objc public init(name: Swift.String, targetParameters: AEPTarget.TargetParameters? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc(AEPTargetOrder) public class TargetOrder : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let orderId: Swift.String
  @objc final public let total: Swift.Double
  @objc final public let purchasedProductIds: [Swift.String]?
  @objc public init(id: Swift.String, total: Swift.Double = 0, purchasedProductIds: [Swift.String]? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc extension AEPTarget.Target {
  @objc(prefetchContent:withParameters:callback:) public static func prefetchContent(_ prefetchArray: [AEPTarget.TargetPrefetch], with targetParameters: AEPTarget.TargetParameters? = nil, _ completion: ((Swift.Error?) -> Swift.Void)?)
  @objc(retrieveLocationContent:withParameters:) public static func retrieveLocationContent(_ requestArray: [AEPTarget.TargetRequest], with targetParameters: AEPTarget.TargetParameters? = nil)
  @objc public static func setThirdPartyId(_ id: Swift.String?)
  @objc public static func getThirdPartyId(_ completion: @escaping (Swift.String?, Swift.Error?) -> Swift.Void)
  @objc public static func setSessionId(_ id: Swift.String?)
  @objc public static func getSessionId(_ completion: @escaping (Swift.String?, Swift.Error?) -> Swift.Void)
  @objc public static func setTntId(_ id: Swift.String?)
  @objc public static func getTntId(_ completion: @escaping (Swift.String?, Swift.Error?) -> Swift.Void)
  @objc public static func resetExperience()
  @objc public static func clearPrefetchCache()
  @objc(setPreviewRestartDeepLink:) public static func setPreviewRestartDeepLink(_ deeplink: Foundation.URL)
  @objc(displayedLocations:withTargetParameters:) public static func displayedLocations(_ names: [Swift.String], targetParameters: AEPTarget.TargetParameters? = nil)
  @objc(clickedLocation:withTargetParameters:) public static func clickedLocation(_ name: Swift.String, targetParameters: AEPTarget.TargetParameters? = nil)
}
@objc(AEPTargetProduct) public class TargetProduct : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let productId: Swift.String
  @objc final public let categoryId: Swift.String?
  @objc public init(productId: Swift.String, categoryId: Swift.String? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc(AEPMobileTarget) public class Target : ObjectiveC.NSObject, AEPCore.Extension {
  @objc public var name: Swift.String
  @objc public var friendlyName: Swift.String
  @objc public static var extensionVersion: Swift.String
  @objc public var metadata: [Swift.String : Swift.String]?
  @objc public var runtime: AEPCore.ExtensionRuntime
  @objc required public init?(runtime: AEPCore.ExtensionRuntime)
  @objc public func onRegistered()
  @objc public func onUnregistered()
  @objc public func readyForEvent(_ event: AEPCore.Event) -> Swift.Bool
  @objc deinit
}
@objc(AEPTargetRequestObject) public class TargetRequest : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let name: Swift.String
  @objc final public let defaultContent: Swift.String
  @objc final public let targetParameters: AEPTarget.TargetParameters?
  @objc public init(mboxName: Swift.String, defaultContent: Swift.String, targetParameters: AEPTarget.TargetParameters? = nil, contentCallback: ((Swift.String?) -> Swift.Void)? = nil)
  @objc public init(mboxName: Swift.String, defaultContent: Swift.String, targetParameters: AEPTarget.TargetParameters? = nil, contentWithDataCallback: ((Swift.String?, [Swift.String : Any]?) -> Swift.Void)? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
